season2017 <- readRDS("shotDataTotal2017.rds")
season2017
devtools::use_data(season2017)
Court <- readRDS("Court.rds")
court <- readRDS("court.rds")
devtools::use_data(court)
str(court)
class(court)
names(court)
?range
??hexbin
?data.frame
?tolower
?quantile
??annotation_custom
library(SpatialBall)
library(SpatialBall)
#' data("season2017")
#' ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270)ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270, type = "PCT")
data("season2017")
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270)
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270, type = "PCT")
library(SpatialBall)
library(SpatialBall)
data("season2017")
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270)
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270, type = "PCT")
library(SpatialBall)
data("season2017")
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270)
ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270, type = "PCT")
library(SpatialBall)
library(SpatialBall)
data("season2017")
OffShotSeasonGraphTeam(shotDataTotal2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "Hou",quant = 0.4)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.4)
OffShotSeasonGraphTeam(shotDataTotal2017, team = "ORL",quant = 0.4, type = "PCT")
library(SpatialBall)
data("season2017")
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "Hou",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4, type = "PCT")
library(SpatialBall)
data("season2017")
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "Hou",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4, type = "PCT")
OffShotSeasonGraphTeam(season2017, team = "Tor",quant = 0.4, type = "PCT")
colnames(season2017)
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
DefShotSeasonGraphTeam(season2017, team = "Hou",quant = 0.4)
DefShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4)
#Examples with shooting percentage instead of Points per Shot
DeffShotSeasonGraphTeam(season2017, team = "ORL",quant = 0.4, type = "PCT")
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
?scale_fill_gradient2
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4) + theme(legend.title = "Points per Shot")
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4) + theme(legend.title = "Points per Shot")
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4) + theme(legend.title = "Points per Shot")
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4) + theme(legend.title = "Points per Shot")
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, type = "PCT")
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, type = "PCT")
library(SpatialBall)
library(SpatialBall)
data("season2017")
#Examples with several players
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry",quant = 0.4)
OffShotSeasonGraphPlayer(season2017, player = "DeAndre Jordan",quant = 0.4)
OffShotSeasonGraphPlayer(season2017, player = "DeMar DeRozan",quant = 0.4)
OffShotSeasonGraphPlayer(season2017, player = "Isaiah Thomas",quant = 0.4)
#Examples with percentage instead of points per shot
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry",quant = 0.4, type = "PCT")
OffShotSeasonGraphPlayer(season2017, player = "DeAndre Jordan",quant = 0.4, type = "PCT")
OffShotSeasonGraphPlayer(season2017, player = "Carmelo Anthony")
OffShotSeasonGraphPlayer(season2017, player = "Carmelo Anthony", quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphPlayer(season2017, player = "Carmelo Anthony")
library(SpatialBall)
data("season2017")
PointShotSeasonGraph(season2017)
library(SpatialBall)
data("season2017")
PointShotSeasonGraph(season2017)
library(SpatialBall)
library(SpatialBall)
data("season2017")
PointShotSeasonGraphTeam(season2017, "Hou")
data("season2017")
PointShotSeasonGraphTeam(season2017, "ORL")
?merge
library(SpatialBall)
ComparisonPPS(OffTeam = GSW, DefTeam = Uta, Seasondata = season2017)
ComparisonPPS(OffTeam = "GSW", DefTeam = "Uta", Seasondata = season2017)
ComparisonPPS(OffTeam = "Uta", DefTeam = "GSW", Seasondata = season2017)
library(SpatialBall)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017)
Get_Apps(HomeTeam = "Uta", VisitorTeam = "Gsw", Seasondata = season2017)
Get_Apps(HomeTeam = "Uta", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017)
Get_Apps(HomeTeam = "Uta", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
BRT <- readRDS("BRT2017_20_Abr.rds")
devtools::use_data(BRT)
library(SpatialBall)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
ShotComparisonGraph(OffTeam = "GSW", DefTown = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
??ggplot_build
??ggplot_gtable
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
grid.Call
??grid.Call
library(SpatialBall)
??grid.Call
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
?grid.arrange()
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
a
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017, focus = "plus")
a
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017, focus = "plus")
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017, focus = "minus")
a
a <- ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017, focus = "minus")
a
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Uta", Seasondata = season2017, focus = "minus")
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017,
focus = "plus")
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
ShotComparisonGraph(HomeTeam = "Bos", VisitorTeam = "Uta", Seasondata = season2017,
focus = "plus")
ShotComparisonGraph(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017,
focus = "plus")
library(SpatialBall)
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry")
OffShotSeasonGraphPlayer(season2017, player = "DeAndre Jordan")
OffShotSeasonGraphPlayer(season2017, player = "DeMar DeRozan")
OffShotSeasonGraphPlayer(season2017, player = "Isaiah Thomas")
BRT <- readRDS("BRT2017_20_Abr_c.rds")
devtools::use_data(BRT)
devtools::use_data(BRT, overwrite = TRUE)
library(SpatialBall)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
library(SpatialBall)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
??range
library(SpatialBall)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
?weighted.mean
1-NA
library(SpatialBall)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
BRT <- readRDS("BRT2017_10_May_c.rds")
devtools::use_data(BRT, overwrite = TRUE)
library(SpatialBall)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
knitr::kable(head(mtcars, 10))
data("season2017")
str(season2017)
colnames(season2017)
plot(1:10)
plot(10:1)
data("season2017")
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
unique(season2017$TEAM_NAME)
OffShotSeasonGraphTeam(season2017, team = "Hou")
OffShotSeasonGraphTeam(season2017, team = "Tor")
OffShotSeasonGraphTeam(season2017, team = "Orl")
OffShotSeasonGraphTeam(season2017, team = "ORL")
library(SpatialBall)
library(SpatialBall)
data("season2017")
SpatialRating(Seasondata = season2017)
library(SpatialBall)
?desc
??desc
library(SpatialBall)
library(SpatialBall)
?Get_Apps
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 30, MAX_Y = 270)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 270)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 280)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 300)
BRT <- readRDS("ChosenModel.rds")
devtools::use_data(BRT, overwrite = TRUE)
BRT <- readRDS("ChosenModel.rds")
devtools::use_data(BRT, overwrite = TRUE)
library(SpatialBall)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "Bos", Seasondata = season2017)
data("season2017")
SpatialRating(Seasondata = season2017)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
library(ggplot2)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 270)
library(ggplot2)
library(hexbin)
library(dplyt)
OffShotSeasonGraphTeam2 <- function(Seasondata, team, nbins = 25, quant = 0.4, type = "PPS", MAX_Y = 280) {
data("court")
Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)
Seasondata <- dplyr::filter(Seasondata, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(Seasondata$LOC_X)
ybnds <- range(Seasondata$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(Seasondata)
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Totalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,
1))))
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- size * width / 6
dy <- size * height / 2 / sqrt(3)
hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)
hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Total <- hex_coord_df(Totalhex$x, Totalhex$y, 40*Totalhex$ST, 15*Totalhex$ST, size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
if(type == "PPS"){
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 1, low = "blue", high = "red", limits=c(0, 3)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ylim(c(-40, 270))+ theme(legend.position="bottom")
}else{
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 0.5, low = "blue", high = "red", limits=c(0, 1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ ylim(c(-40, 270))+ theme(legend.position="bottom")}
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle(paste("Shooting percentage", team, sep =" ")
)}
return(GRAPH)
}
OffShotSeasonGraphTeam2(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam2(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam(season2017, team = "GSW")
ShotSeasonGraphTeam(season2017)
ShotSeasonGraph(season2017)
library(SpatialBall)
library(SpatialBall)

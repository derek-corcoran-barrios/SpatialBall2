library(SpatialBall)
library(SpatialBall)
??range
library(SpatialBall)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
?weighted.mean
1-NA
library(SpatialBall)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
BRT <- readRDS("BRT2017_10_May_c.rds")
devtools::use_data(BRT, overwrite = TRUE)
library(SpatialBall)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
knitr::kable(head(mtcars, 10))
data("season2017")
str(season2017)
colnames(season2017)
plot(1:10)
plot(10:1)
data("season2017")
Get_Apps(HomeTeam = "Was", VisitorTeam = "Bos", Seasondata = season2017)
unique(season2017$TEAM_NAME)
OffShotSeasonGraphTeam(season2017, team = "Hou")
OffShotSeasonGraphTeam(season2017, team = "Tor")
OffShotSeasonGraphTeam(season2017, team = "Orl")
OffShotSeasonGraphTeam(season2017, team = "ORL")
library(SpatialBall)
library(SpatialBall)
data("season2017")
SpatialRating(Seasondata = season2017)
library(SpatialBall)
?desc
??desc
library(SpatialBall)
library(SpatialBall)
?Get_Apps
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 30, MAX_Y = 270)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 270)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 280)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Was", Seasondata = season2017, nbins = 20, MAX_Y = 300)
BRT <- readRDS("ChosenModel.rds")
devtools::use_data(BRT, overwrite = TRUE)
BRT <- readRDS("ChosenModel.rds")
devtools::use_data(BRT, overwrite = TRUE)
library(SpatialBall)
Get_Apps(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "GSW", Seasondata = season2017)
Get_Apps(HomeTeam = "Bos", VisitorTeam = "Cle", Seasondata = season2017)
Get_Apps(HomeTeam = "Cle", VisitorTeam = "Bos", Seasondata = season2017)
data("season2017")
SpatialRating(Seasondata = season2017)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
library(ggplot2)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 280) + ylim(c(-40, 280))
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4, nbins = 25, MAX_Y = 270)
library(ggplot2)
library(hexbin)
library(dplyt)
OffShotSeasonGraphTeam2 <- function(Seasondata, team, nbins = 25, quant = 0.4, type = "PPS", MAX_Y = 280) {
data("court")
Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)
Seasondata <- dplyr::filter(Seasondata, TEAM_NAME == team)
#Get the maximum and minumum values for x and y
xbnds <- range(Seasondata$LOC_X)
ybnds <- range(Seasondata$LOC_Y)
#Make hexbin dataframes out of the teams
if (type == "PPS"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
if (type == "PCT"){
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
}
##Total NBA data
Totalhex <- makeHexData(Seasondata)
Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))
Totalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,
ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,
1))))
#Function to transform hexbins into polygons
hex_coord_df <- function(x, y, width, height, size = 1) {
# like hex_coord but returns a dataframe of vertices grouped by an id variable
dx <- size * width / 6
dy <- size * height / 2 / sqrt(3)
hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)
hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)
id    <- rep(1:length(x), each=6)
data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))
}
#Transform Hexbins into polygons
Total <- hex_coord_df(Totalhex$x, Totalhex$y, 40*Totalhex$ST, 15*Totalhex$ST, size =1)
Total$PPS <- rep(Totalhex$PPS, each = 6)
#Make Graph
if(type == "PPS"){
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 1, low = "blue", high = "red", limits=c(0, 3)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold")) + ylim(c(-40, 270))+ theme(legend.position="bottom")
}else{
GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 0.5, low = "blue", high = "red", limits=c(0, 1)) +
coord_fixed()  +theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_blank(),
plot.title = element_text(size = 17, lineheight = 1.2, face = "bold"))+ ylim(c(-40, 270))+ theme(legend.position="bottom")}
if(type == "PPS"){
GRAPH <- GRAPH +  ggtitle(paste("Points per Shot of", team, sep =" "))
}  else {GRAPH <- GRAPH +  ggtitle(paste("Shooting percentage", team, sep =" ")
)}
return(GRAPH)
}
OffShotSeasonGraphTeam2(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam2(season2017, team = "GSW",quant = 0.4)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
OffShotSeasonGraphTeam(season2017, team = "GSW")
ShotSeasonGraphTeam(season2017)
ShotSeasonGraph(season2017)
library(SpatialBall)
library(SpatialBall)
Totalhex
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Sas", Seasondata = season2017)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017)
library(SpatialBall)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "plus")
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "minus")
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "minus", nbins = 8)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "plus", nbins = 8)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, nbins = 8)
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, nbins = 8)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, nbins = 8, focus = "plus")
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, nbins = 8, focus = "plus")
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, nbins = 8, focus = "minus")
library(SpatialBall)
data("season2017")
#Examples with several teams
ShotComparisonGraph(HomeTeam = "GSW", VisitorTeam = "Cle", Seasondata = season2017, focus = "minus")
library(SpatialBall)
data("season2017")
#Examples with several players
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry")
data("season2017")
#Examples with several players
OffShotSeasonGraphTeam(season2017, player = "Bos")
data("season2017")
#Examples with several teams
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
library(SpatialBall)
library(SpatialBall)
library(SpatialBall)
?OffShotSeasonGraphPlayer
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry")
?OffShotSeasonGraphTeam()
data("season2017")
#Examples with several teams
OffShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
data("season2017")
#Examples with several teams
DefShotSeasonGraphTeam(season2017, team = "GSW",quant = 0.4)
250-500
418 - 500
library(SpatialBall)
data("season2017")
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
library(SpatialBall)
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry")
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry")
OffShotSeasonGraphPlayer(season2017, player = "Stephen Curry", type = "PCT")
OffShotSeasonGraphPlayerEight(season2017, player = "Stephen Curry", type = "PCT")
OffShotSeasonGraphPlayerEight(season2017, player = "DeAndre Jordan")
OffShotSeasonGraphPlayerEight(season2017, player = "James Harden", type = "PCT")
OffShotSeasonGraphPlayerEight(season2017, player = "James Harden")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "James Harden")
library(SpatialBall)
OffShotSeasonGraphPlayerEight(season2017, player = "DeAndre Jordan")
library(SpatialBall)
data("season2017")
OffShotSeasonGraphTeam(Seasondata = season2017, "Min")
OffShotSeason(Seasondata = season2017)
SpatialBall::ShotSeasonGraph(season2017)
OffShotSeasonGraphPlayer(Seasondata = season2017, "jimmy Butler")
OffShotSeasonGraphPlayer(Seasondata = season2017, "Jimmy Butler")
dplyr::filter(season2017, TEAM_NAME = "Min")
dplyr::filter(season2017, TEAM_NAME == "Min")
dplyr::filter(season2017, TEAM_NAME == "Min")$PLAYER_NAME
unique(dplyr::filter(season2017, TEAM_NAME == "Min")$PLAYER_NAME)
OffShotSeasonGraphPlayer(Seasondata = season2017, "Ricky Rubio ")
OffShotSeasonGraphPlayer(Seasondata = season2017, "Ricky Rubio")
OffShotSeasonGraphPlayer(Seasondata = season2017, "Karl-Anthony Towns")
OffShotSeasonGraphPlayer(Seasondata = season2017, "Andrew Wiggins")
OffShotSeasonGraphPlayer(Seasondata = season2017, "Gorgui Dieng")
OffTeam <- "Hou"
DefTeam <- "GSW"
nbins = 25
MAX_Y = 280
Seasondata <- season2017
library(dplyr)
library(hexbin)
ComparisonPPS <- function(OffTeam, DefTeam, Seasondata, nbins = 25, MAX_Y = 280) {
#Filter the offensive data of the Offensive Team
Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)
Off <- filter(Seasondata, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam & TEAM_NAME != DefTeam)
#Get the maximum and minumum values for x and y
#xbnds <- range(c(Seasondata$LOC_X, deff$LOC_X), na.rm = TRUE)
#ybnds <- range(c(Seasondata$LOC_Y, deff$LOC_Y), na.rm = TRUE)
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = c(-250, 250), ybnds = c(-51, MAX_Y), IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(Seasondata)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
#  make a "difference" data.frame
DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),
y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),
PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,
cid= DeffbyCell$cid,
ST = DeffbyCell$ST.y)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, by = "cid", all = T)
Comparison <- Comparison[,-c(6:7)]
Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)
PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x, na.rm = TRUE)
Offa <- dplyr::filter(Seasondata, HTM == OffTeam | VTM == OffTeam)
OffCorrection <- nrow(dplyr::filter(Offa, TEAM_NAME == OffTeam))/nrow(dplyr::filter(Offa, TEAM_NAME != OffTeam))
Defa <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam)
DefCorrection <- nrow(dplyr::filter(Defa, TEAM_NAME != DefTeam))/nrow(dplyr::filter(Defa, TEAM_NAME == DefTeam))
PPSAAc = PPSAA*((OffCorrection*DefCorrection)/2)
return(PPSAAc)
}
#Filter the offensive data of the Offensive Team
Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)
Off <- filter(Seasondata, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam & TEAM_NAME != DefTeam)
#Get the maximum and minumum values for x and y
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = c(-250, 250), ybnds = c(-51, MAX_Y), IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(Seasondata)
##Defensive team data
Defhex <- makeHexData(deff)
##Offensive team data
Offhex <- makeHexData(Off)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
head(Totalhex)
head(DeffbyCell)
Totalhex
head(Totalhex)
##Total NBA data
Totalhex <- makeHexData(Seasondata)
Totalhex <- rename(Totalhex, PPSTotal = PPS, STTotal = ST)
View(Totalhex)
##Total NBA data
Totalhex <- makeHexData(Seasondata)
Totalhex <- rename(Totalhex, TotalPPS = PPS, TotalST = ST)
Defhex <- makeHexData(deff)
Defhex <- rename(Defhex, DefPPS = PPS, DefST = ST)
##Offensive team data
Offhex <- makeHexData(Off)
Offhex <- rename(Offhex, OffPPS = PPS, OffST = ST)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, by = "cid", all = T)
OffByCell <- merge(Totalhex, Offhex, by = "cid", all = T)
head(DeffbyCell)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, all = T)
head(DeffbyCell)
head(arrange(DeffbyCell, desc(TotalST)))
OffByCell <- merge(Totalhex, Offhex, all = T)
head(arrange(OffByCell, desc(TotalST)))
nrow(DeffbyCell)
nrow(OffbyCell)
OffByCell <- merge(Totalhex, Offhex, all = T)
nrow(OffbyCell)
nrow(OffByCell)
DiffDeff <- data.frame(x = DeffbyCell$x,
y = DeffbyCell$y,
PPS= DeffbyCell$DefPPS - DeffbyCell$TotalPPS,
cid= DeffbyCell$cid,
ST = DeffbyCell$DefST)
head(DiffDeff)
head(arrange(DiffDeff, desc(ST)))
head(arrange(DiffDeff, desc(ST)),20)
OffTeam <- "Hou"
DefTeam <- "GSW"
nbins = 25
MAX_Y = 280
Seasondata <- season2017
library(dplyr)
library(hexbin)
library(SpatialBall)
OffTeam <- "Hou"
DefTeam <- "GSW"
nbins = 25
MAX_Y = 280
Seasondata <- season2017
library(dplyr)
library(hexbin)
#Filter the offensive data of the Offensive Team
Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)
Off <- filter(Seasondata, TEAM_NAME == OffTeam)
#Filter the Deffensive data of the Defensive team
deff <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam & TEAM_NAME != DefTeam)
#Get the maximum and minumum values for x and y
#Make hexbin dataframes out of the teams
makeHexData <- function(df) {
h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = c(-250, 250), ybnds = c(-51, MAX_Y), IDs = TRUE)
data.frame(hcell2xy(h),
PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == "3pt field goal", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),
ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),
cid = h@cell)
}
##Total NBA data
Totalhex <- makeHexData(Seasondata)
Totalhex <- rename(Totalhex, TotalPPS = PPS, TotalST = ST)
##Defensive team data
Defhex <- makeHexData(deff)
Defhex <- rename(Defhex, DefPPS = PPS, DefST = ST)
##Offensive team data
Offhex <- makeHexData(Off)
Offhex <- rename(Offhex, OffPPS = PPS, OffST = ST)
#Merge offensive and deffensive data with total data by Cell id
DeffbyCell <- merge(Totalhex, Defhex, all = T)
OffbyCell <- merge(Totalhex, Offhex, all = T)
#  make a "difference" data.frame
DiffDeff <- data.frame(x = DeffbyCell$x,
y = DeffbyCell$y,
PPS= DeffbyCell$DefPPS - DeffbyCell$TotalPPS,
cid= DeffbyCell$cid,
ST = DeffbyCell$DefST)
DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),
y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),
PPS= OffByCell$PPS.y - OffByCell$PPS.x,
ST = OffByCell$ST.x,
cid = OffByCell$cid,
ST = OffByCell$ST.y)
HED(DeffbyCell)
HED(DeffbyCell)
head(DeffbyCell)
DiffDeff <- mutate(DeffbyCell, DefPPS = DefPPS - TotalPPS)
head(DiffDeff)
nrow(DiffDeff)
DiffOff <-  mutate(OffbyCell, OffPPS = OffPPS - TotalPPS)
nrow(DiffOff)
head(DiffOff)
#make team comparisons
Comparison <- merge(DiffOff, DiffDeff, all = T)
View(Comparison)
Comparison <- mutate(Comparison, Diff = OffPPS + DefPPS + TotalPPS)
?weighted.mean
PPSAA <- weighted.mean(x = Comparison$Diff, w = (Comparison$OffST + Comparison$DefST), na.rm = TRUE)
PPSAA
head(arrange(Comparison, desc(Diff)))
head(arrange(Comparison, Diff))
head(arrange(Comparison, desc(TotalST)))
head(arrange(Comparison, desc(TotalST)), 40)
Offa <- dplyr::filter(Seasondata, HTM == OffTeam | VTM == OffTeam)
OffCorrection <- nrow(dplyr::filter(Offa, TEAM_NAME == OffTeam))/nrow(dplyr::filter(Offa, TEAM_NAME != OffTeam))
Defa <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam)
DefCorrection <- nrow(dplyr::filter(Defa, TEAM_NAME != DefTeam))/nrow(dplyr::filter(Defa, TEAM_NAME == DefTeam))
PPSAAc = PPSAA*((OffCorrection*DefCorrection)/2)
PPSAAc
PPSAA
OffCorrection
DeffCorrection
DefCorrection
DefCorrection*OffCorrection
PPSAAc = PPSAA*((OffCorrection+DefCorrection)/2)
PPSAAc
PPSAA

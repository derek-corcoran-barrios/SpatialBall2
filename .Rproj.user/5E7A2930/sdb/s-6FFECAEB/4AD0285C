{
    "collab_server" : "",
    "contents" : "#' plot the shot chart of a whole NBA Season\n#'\n#' This function takes an NBA season object and makes a shot chart of all the\n#' shots takes through that regular season.\n#' You can choose to either plot the results based on Points per Shot or on\n#' Shooting Percentage\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param quant A number between 0 and 1, it determines quantile of shots used\n#' to plot the shot chart, (default is 0.4)\n#' @param type A character to specify if the shot chart is based on Points per\n#' Shot (\"PPS\") or percentage (\"PCT\")\n#' @param MAX_Y a numeric that limits the y axis of the shot chart, defaults at\n#' 270\n#' @return a ggplot object plotting the shot chart of a given NBA season\n#' @examples\n#' data(\"season2017\")\n#' ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270)\n#' ShotSeasonGraph(season2017, quant = 0.4, MAX_Y = 270, type = \"PCT\")\n#' @seealso \\code{\\link[SpatialBall]{DefShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_polygon\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 scale_fill_gradient2\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @importFrom stats quantile\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n\n\nShotSeasonGraph <- function(Seasondata, nbins = 30, quant = 0.4, type = \"PPS\", MAX_Y = 270) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(Seasondata$LOC_X)\n  ybnds <- range(Seasondata$LOC_Y)\n  #Make hexbin dataframes out of the teams\n\n  if (type == \"PPS\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n  if (type == \"PCT\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n\n  ##Total NBA data\n  Totalhex <- makeHexData(Seasondata)\n  Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))\n  Totalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,\n                        ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,\n                               ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,\n                                      ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,\n                                             1))))\n\n\n  #Function to transform hexbins into polygons\n  hex_coord_df <- function(x, y, width, height, size = 1) {\n    # like hex_coord but returns a dataframe of vertices grouped by an id variable\n    dx <- size * width / 6\n    dy <- size * height / 2 / sqrt(3)\n\n    hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)\n    hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)\n    id    <- rep(1:length(x), each=6)\n\n    data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))\n  }\n\n  #Transform Hexbins into polygons\n\n  Total <- hex_coord_df(Totalhex$x, Totalhex$y, 30*Totalhex$ST, 10*Totalhex$ST, size =1)\n  Total$PPS <- rep(Totalhex$PPS, each = 6)\n\n  #Make Graph\n  if(type == \"PPS\"){\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 1, low = \"blue\", high = \"red\", limits=c(0, 3)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            legend.title = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270)) + xlim(c(-250, 250)) + theme(legend.position=\"bottom\")\n  }else{\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 0.5, low = \"blue\", high = \"red\", limits=c(0, 1)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            legend.title = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270)) + xlim(c(-250, 250))+ theme(legend.position=\"bottom\")\n  }\n  if(type == \"PPS\"){\n    GRAPH <- GRAPH +  ggtitle(\"Points per Shot\")\n  }  else {GRAPH <- GRAPH +  ggtitle(\"Shooting percentage\")}\n\n\n  return(GRAPH)\n}\n\n#' plot the offensive shot chart of a team for an NBA Season\n#'\n#' This function takes an NBA season object and makes a shot chart of all the\n#' shots takes through that regular season.\n#' You can choose to either plot the results based on Points per Shot or on\n#' Shooting Percentage\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param team the team you which to plot the shot charts of\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param quant A number between 0 and 1, it determines quantile of shots used\n#' to plot the shot chart, (default is 0.4)\n#' @param type A character to specify if the shot chart is based on Points per\n#' Shot (\"PPS\") or percentage (\"PCT\")\n#' @param MAX_Y a numeric that limits the y axis of the shot chart, defaults at\n#' 270\n#' @return a ggplot object plotting the offensive shot chart of a given team on\n#' an NBA season\n#' @examples\n#' data(\"season2017\")\n#' #Examples with several teams\n#' OffShotSeasonGraphTeam(season2017, team = \"GSW\",quant = 0.4)\n#' OffShotSeasonGraphTeam(season2017, team = \"Hou\",quant = 0.4)\n#' OffShotSeasonGraphTeam(season2017, team = \"ORL\",quant = 0.4)\n#' #Examples with shooting percentage instead of Points per Shot\n#' OffShotSeasonGraphTeam(season2017, team = \"ORL\",quant = 0.4, type = \"PCT\")\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}#' @importFrom dplyr filter\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_polygon\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 scale_fill_gradient2\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @importFrom stats quantile\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n\nOffShotSeasonGraphTeam <- function(Seasondata, team, nbins = 30, quant = 0.4, type = \"PPS\", MAX_Y = 270) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)\n  Seasondata <- dplyr::filter(Seasondata, TEAM_NAME == team)\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(Seasondata$LOC_X)\n  ybnds <- range(Seasondata$LOC_Y)\n  #Make hexbin dataframes out of the teams\n\n  if (type == \"PPS\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n  if (type == \"PCT\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n\n  ##Total NBA data\n  Totalhex <- makeHexData(Seasondata)\n  Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))\n  Totalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,\n                        ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,\n                               ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,\n                                      ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,\n                                             1))))\n\n\n  #Function to transform hexbins into polygons\n  hex_coord_df <- function(x, y, width, height, size = 1) {\n    # like hex_coord but returns a dataframe of vertices grouped by an id variable\n    dx <- size * width / 6\n    dy <- size * height / 2 / sqrt(3)\n\n    hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)\n    hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)\n    id    <- rep(1:length(x), each=6)\n\n    data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))\n  }\n\n  #Transform Hexbins into polygons\n\n  Total <- hex_coord_df(Totalhex$x, Totalhex$y, 30*Totalhex$ST, 10*Totalhex$ST, size =1)\n  Total$PPS <- rep(Totalhex$PPS, each = 6)\n\n  #Make Graph\n  if(type == \"PPS\"){\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 1, low = \"blue\", high = \"red\", limits=c(0, 3)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            legend.title = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270))+ theme(legend.position=\"bottom\")\n  }else{\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 0.5, low = \"blue\", high = \"red\", limits=c(0, 1)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            legend.title = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270))+ theme(legend.position=\"bottom\")}\n  if(type == \"PPS\"){\n    GRAPH <- GRAPH +  ggtitle(paste(\"Points per Shot of\", team, sep =\" \"))\n  }  else {GRAPH <- GRAPH +  ggtitle(paste(\"Shooting percentage\", team, sep =\" \")\n  )}\n\n\n  return(GRAPH)\n}\n\n#' plot the defensive shot chart of a team for an NBA Season\n#'\n#' This function takes an NBA season object and makes a shot chart of all the\n#' shots takes through that regular season.\n#' You can choose to either plot the results based on Points per Shot or on\n#' Shooting Percentage\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param team the team you which to plot the defensive shot charts of\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param quant A number between 0 and 1, it determines quantile of shots used\n#' to plot the shot chart, (default is 0.4)\n#' @param type A character to specify if the shot chart is based on Points per\n#' Shot (\"PPS\") or percentage (\"PCT\")\n#' @param MAX_Y a numeric that limits the y axis of the shot chart, defaults at\n#' 270\n#' @return a ggplot object plotting the defensive shot chart of a given team on\n#' an NBA season\n#' @examples\n#' data(\"season2017\")\n#' #Examples with several teams\n#' DefShotSeasonGraphTeam(season2017, team = \"GSW\",quant = 0.4)\n#' DefShotSeasonGraphTeam(season2017, team = \"Hou\",quant = 0.4)\n#' DefShotSeasonGraphTeam(season2017, team = \"ORL\",quant = 0.4)\n#' #Examples with shooting percentage instead of Points per Shot\n#' DefShotSeasonGraphTeam(season2017, team = \"ORL\",quant = 0.4, type = \"PCT\")\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_polygon\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 scale_fill_gradient2\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @importFrom stats quantile\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n\nDefShotSeasonGraphTeam <- function(Seasondata, team, nbins = 30, quant = 0.4, type = \"PPS\", MAX_Y = 270) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)\n  Seasondata <- dplyr::filter(Seasondata, HTM == team | VTM == team & TEAM_NAME != team)\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(Seasondata$LOC_X)\n  ybnds <- range(Seasondata$LOC_Y)\n  #Make hexbin dataframes out of the teams\n\n  if (type == \"PPS\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n  if (type == \"PCT\"){\n    makeHexData <- function(df) {\n      h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n      data.frame(hcell2xy(h),\n                 PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),\n                 ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n                 cid = h@cell)\n    }\n  }\n\n\n  ##Total NBA data\n  Totalhex <- makeHexData(Seasondata)\n  Totalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))\n  Totalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,\n                        ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,\n                               ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,\n                                      ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,\n                                             1))))\n\n\n  #Function to transform hexbins into polygons\n  hex_coord_df <- function(x, y, width, height, size = 1) {\n    # like hex_coord but returns a dataframe of vertices grouped by an id variable\n    dx <- size * width / 6\n    dy <- size * height / 2 / sqrt(3)\n\n    hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)\n    hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)\n    id    <- rep(1:length(x), each=6)\n\n    data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))\n  }\n\n  #Transform Hexbins into polygons\n\n  Total <- hex_coord_df(Totalhex$x, Totalhex$y, 30*Totalhex$ST, 10*Totalhex$ST, size =1)\n  Total$PPS <- rep(Totalhex$PPS, each = 6)\n\n  #Make Graph\n  if(type == \"PPS\"){\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(name = \"PPS\", midpoint = 1, low = \"blue\", high = \"red\", limits=c(0, 3)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270))+ theme(legend.position=\"bottom\")\n  }else{\n    GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(name = \"Pct\", midpoint = 0.5, low = \"blue\", high = \"red\", limits=c(0, 1)) +\n      coord_fixed()  +theme(line = element_blank(),\n                            axis.title.x = element_blank(),\n                            axis.title.y = element_blank(),\n                            axis.text.x = element_blank(),\n                            axis.text.y = element_blank(),\n                            plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270))+ theme(legend.position=\"bottom\")}\n    GRAPH <- GRAPH +  ggtitle(paste(\"Defensive shot chart of\", team, sep =\" \"))\n\n\n  return(GRAPH)\n}\n\n#' plot the shot chart of a player for an NBA Season\n#'\n#' This function takes an NBA season object and makes a shot chart of all the\n#' shots takes through that regular season.\n#' You can choose to either plot the results based on Points per Shot or on\n#' Shooting Percentage\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param player the player you which to plot the shot charts of\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param quant A number between 0 and 1, it determines quantile of shots used\n#' to plot the shot chart, (default is 0.4)\n#' @param type A character to specify if the shot chart is based on Points per\n#' Shot (\"PPS\") or percentage (\"PCT\")\n#' @param MAX_Y a numeric that limits the y axis of the shot chart, defaults at\n#' 270\n#' @return a ggplot object plotting the defensive shot chart of a given team on\n#' an NBA season\n#' @examples\n#' data(\"season2017\")\n#' #Examples with several players\n#' OffShotSeasonGraphPlayer(season2017, player = \"Stephen Curry\")\n#' OffShotSeasonGraphPlayer(season2017, player = \"DeAndre Jordan\")\n#' OffShotSeasonGraphPlayer(season2017, player = \"DeMar DeRozan\")\n#' OffShotSeasonGraphPlayer(season2017, player = \"Isaiah Thomas\")\n#'\n#'  #Examples with percentage instead of points per shot\n#' OffShotSeasonGraphPlayer(season2017, player = \"Stephen Curry\", type = \"PCT\")\n#' OffShotSeasonGraphPlayer(season2017, player = \"DeAndre Jordan\", type = \"PCT\")\n\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_polygon\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 scale_fill_gradient2\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @importFrom stats quantile\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n#'\nOffShotSeasonGraphPlayer <- function(Seasondata, player, nbins = 30, quant = 0.4, type = \"PPS\", MAX_Y = 270) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)\nSeasondata <- dplyr::filter(Seasondata, PLAYER_NAME == player)\n#Get the maximum and minumum values for x and y\nxbnds <- range(Seasondata$LOC_X)\nybnds <- range(Seasondata$LOC_Y)\n#Make hexbin dataframes out of the players\n\nif (type == \"PPS\"){\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n}\n\nif (type == \"PCT\"){\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG)), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n}\n\n\n##Total NBA data\nTotalhex <- makeHexData(Seasondata)\nTotalhex <- filter(Totalhex, ST > quantile(Totalhex$ST, probs = quant))\nTotalhex$ST <- ifelse(Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2], 0.06,\n                      ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[2] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] , 0.12 ,\n                             ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[3] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] , 0.25 ,\n                                    ifelse(Totalhex$ST > quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[4] & Totalhex$ST <= quantile(Totalhex$ST, probs = c(0, 0.25, 0.5, 0.75, 0.9, 1))[5] , 0.5 ,\n                                           1))))\n\n\n#Function to transform hexbins into polygons\nhex_coord_df <- function(x, y, width, height, size = 1) {\n  # like hex_coord but returns a dataframe of vertices grouped by an id variable\n  dx <- size * width / 6\n  dy <- size * height / 2 / sqrt(3)\n\n  hex_y <- rbind(y - 2 * dy, y - dy, y + dy, y + 2 * dy, y + dy, y - dy)\n  hex_x <- rbind(x, x + dx, x + dx, x, x - dx, x - dx)\n  id    <- rep(1:length(x), each=6)\n\n  data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))\n}\n\n#Transform Hexbins into polygons\n\nTotal <- hex_coord_df(Totalhex$x, Totalhex$y, 30*Totalhex$ST, 10*Totalhex$ST, size =1)\nTotal$PPS <- rep(Totalhex$PPS, each = 6)\n\n#Make Graph\nif(type == \"PPS\"){\n  GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 1, low = \"blue\", high = \"red\", limits=c(0, 3)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270))+ xlim(c(-250, 250)) + theme(legend.position=\"bottom\")\n}else{\n  GRAPH <- ggplot(Total, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(midpoint = 0.5, low = \"blue\", high = \"red\", limits=c(0, 1)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270))+ xlim(c(-250, 250)) + theme(legend.position=\"bottom\")\n}\nif(type == \"PPS\"){\n  GRAPH <- GRAPH +  ggtitle(paste(\"Points per Shot of\", player, sep =\" \"))\n}  else {GRAPH <- GRAPH +  ggtitle(paste(\"Shooting percentage\", player, sep =\" \")\n)}\n\n\nreturn(GRAPH)\n}\n\n\n#' plot all the shots taken on an NBA Season separating makes and misses\n#'\n#' This function takes an NBA season object and plots as circles all the shots\n#' taken on an nba season, ploting makes and misses as different colors\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @return a ggplot object plotting all the shots taken on an NBA season\n#' @examples\n#' data(\"season2017\")\n#' PointShotSeasonGraph(season2017)\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_point\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n#'\n\n\nPointShotSeasonGraph <- function(Seasondata) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < 270)\n  Seasondata$SHOT_MADE_FLAG <- ifelse(Seasondata$SHOT_MADE_FLAG == \"1\", \"Made\", \"Missed\")\n  Seasondata$SHOT_MADE_FLAG <- as.factor(Seasondata$SHOT_MADE_FLAG)\n  #Make Graph\n  GRAPH <- ggplot(Seasondata, aes(x=LOC_X, y = LOC_Y))+ annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(color = SHOT_MADE_FLAG), alpha = 0.2) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270))+ theme(legend.position=\"bottom\")\n  return(GRAPH)\n}\n\n\n#' plot all the shots taken on an NBA Season separating makes and misses\n#'\n#' This function takes an NBA season object and plots as circles all the shots\n#' taken on an nba season, ploting makes and misses as different colors\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param team The team the shots should be graphed\n#' @return a ggplot object plotting all the shots taken by a team on an NBA\n#' season\n#' @examples\n#' data(\"season2017\")\n#' PointShotSeasonGraphTeam(season2017, \"Hou\")\n#' PointShotSeasonGraphTeam(season2017, \"Orl\")\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_point\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n#'\n\n\nPointShotSeasonGraphTeam <- function(Seasondata, team) {\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < 270)\n  Seasondata <- dplyr::filter(Seasondata, TEAM_NAME == team)\n  Seasondata$SHOT_MADE_FLAG <- ifelse(Seasondata$SHOT_MADE_FLAG == \"1\", \"Made\", \"Missed\")\n  Seasondata$SHOT_MADE_FLAG <- as.factor(Seasondata$SHOT_MADE_FLAG)\n  #Make Graph\n  GRAPH <- ggplot(Seasondata, aes(x=LOC_X, y = LOC_Y))+ annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(color = SHOT_MADE_FLAG), alpha = 0.2) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270))+ theme(legend.position=\"bottom\")\n  return(GRAPH)\n}\n",
    "created" : 1494071509878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1555136369",
    "id" : "4AD0285C",
    "lastKnownWriteTime" : 1494239491,
    "last_content_update" : 1494239491118,
    "path" : "~/Documents/SpatialBall/R/plots.R",
    "project_path" : "R/plots.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
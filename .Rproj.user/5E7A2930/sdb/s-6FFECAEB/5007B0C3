{
    "collab_server" : "",
    "contents" : "#' Calculate the Apps for an NBA matchup for a particular nba Season\n#'\n#' This function takes an NBA season object and calculates de Apps for a\n#' particular matchup.\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param HomeTeam Home Team\n#' @param VisitorTeam Visitor Team\n#' @return a dataframe with the offensive apps, defensive apps and home spread\n#' @examples\n#' data(\"season2017\")\n#' Get_Apps(HomeTeam = \"Bos\", VisitorTeam = \"Was\", Seasondata = season2017)\n#' Get_Apps(HomeTeam = \"GSW\", VisitorTeam = \"Cle\", Seasondata = season2017)\n#' Get_Apps(HomeTeam = \"Cle\", VisitorTeam = \"GSW\", Seasondata = season2017)\n#' @seealso \\code{\\link[SpatialBall]{DefShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @importFrom caret predict.train\n#' @importFrom dplyr filter\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\nGet_Apps <- function(HomeTeam, VisitorTeam, Seasondata, nbins = 40){\n  ComparisonPPS <- function(OffTeam, DefTeam, Seasondata, nbins = nbins) {\n  #Filter the offensive data of the Offensive Team\n  Off <- filter(Seasondata, TEAM_NAME == OffTeam)\n  #Filter the Deffensive data of the Defensive team\n  deff <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam & TEAM_NAME != DefTeam)\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(c(Seasondata$LOC_X, deff$LOC_X))\n  ybnds <- range(c(Seasondata$LOC_Y, deff$LOC_Y))\n  #Make hexbin dataframes out of the teams\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n  ##Total NBA data\n  Totalhex <- makeHexData(Seasondata)\n  ##Defensive team data\n  Defhex <- makeHexData(deff)\n  ##Offensive team data\n  Offhex <- makeHexData(Off)\n  #Merge offensive and deffensive data with total data by Cell id\n  DeffbyCell <- merge(Totalhex, Defhex, by = \"cid\", all = T)\n  OffByCell <- merge(Totalhex, Offhex, by = \"cid\", all = T)\n  ##  when calculating the difference empty cells should count as 0\n  DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0\n  DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0\n  DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0\n\n  OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0\n  OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0\n  OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0\n  #  make a \"difference\" data.frame\n  DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),\n                         y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),\n                         PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,\n                         cid= DeffbyCell$cid,\n                         ST = DeffbyCell$ST.y)\n\n  DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),\n                        y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),\n                        PPS= OffByCell$PPS.y - OffByCell$PPS.x,\n                        ST = OffByCell$ST.x,\n                        cid = OffByCell$cid,\n                        ST = OffByCell$ST.y)\n  #make team comparisons\n  Comparison <- merge(DiffOff, DiffDeff, by = \"cid\", all = T)\n  Comparison <- Comparison[,-c(6:7)]\n  Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)\n\n\n  PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)\n\n\n  return(PPSAA)\n  }\n  data(\"BRT\")\n  defAPPS <- ComparisonPPS(OffTeam = HomeTeam, DefTeam = VisitorTeam, Seasondata = Seasondata, nbins = nbins)\n  offAPPS <- ComparisonPPS(OffTeam = VisitorTeam, DefTeam = HomeTeam, Seasondata = Seasondata, nbins = nbins)\n  spread <- predict(BRT, data.frame(defAPPS = defAPPS, offAPPS = offAPPS))\n  return(data.frame(defAPPS = defAPPS, offAPPS= offAPPS, spread = spread))\n}\n\n\n#' plot the comparative shot chart of the matchup of twon teams for an NBA\n#' Season\n#'\n#' This function takes an NBA season object and makes a comparative shot chart of\n#' all the matchup of two teams through that regular season.\n#' @param Seasondata The information of shots, it can be downloaded with function\n#' read_season\n#' @param HomeTeam The home team in the match up\n#' @param VisitorTeam The visitor team in the match up\n#' @param nbins The number of bins the hexplot for the shot charts are made\n#' (default is 30)\n#' @param quant A number between 0 and 1, it determines quantile of shots used\n#' to plot the shot chart, (default is 0.4)\n#' @param focus A character to specify where the shot chart will focus on, if\n#' the character \"all\" (default) is specified, all shots will be ploted, if\n#' \"plus\" the shots where the offense has the advantage, if minus, where the\n#' defense has the advantage\n#' @param MAX_Y a numeric that limits the y axis of the shot chart, defaults at\n#' 270\n#' @return a ggplot object plotting the offensive shot chart of a given team on\n#' an NBA season\n#' @examples\n#' data(\"season2017\")\n#' #Examples with several teams\n#' ShotComparisonGraph(HomeTeam = \"GSW\", VisitorTeam = \"Sas\", Seasondata = season2017)\n#' ShotComparisonGraph(HomeTeam = \"GSW\", VisitorTeam = \"Sas\", Seasondata = season2017,\n#' focus = \"plus\")\n#' @seealso \\code{\\link[SpatialBall]{OffShotSeasonGraphTeam}}\n#' @seealso \\code{\\link[SpatialBall]{ShotSeasonGraph}}#' @importFrom dplyr filter\n#' @importFrom dplyr filter\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 annotation_custom\n#' @importFrom ggplot2 coord_fixed\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 element_text\n#' @importFrom ggplot2 geom_polygon\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 ggplot_build\n#' @importFrom ggplot2 ggplot_gtable\n#' @importFrom ggplot2 ggtitle\n#' @importFrom ggplot2 scale_fill_gradient2\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 xlim\n#' @importFrom ggplot2 ylim\n#' @importFrom gridExtra arrangeGrob\n#' @importFrom gridExtra grid.arrange\n#' @importFrom hexbin hcell2xy\n#' @importFrom hexbin hexbin\n#' @importFrom stats quantile\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n#' @export\n\nShotComparisonGraph <-function(HomeTeam, VisitorTeam, Seasondata, nbins = 30, quant = 0.4, focus = \"all\", MAX_Y = 270){\n  ShotComparisonGraph2 <- function(OffTeam, DefTeam, Seasondata, nbins = 30, quant = 0.4, focus = \"all\", MAX_Y = 270) {\n  #Filter the offensive data of the Offensive Team\n  data(\"court\")\n  Seasondata <- dplyr::filter(Seasondata, LOC_Y < MAX_Y)\n  Off <- filter(Seasondata, TEAM_NAME == OffTeam)\n  #Filter the Deffensive data of the Defensive team\n  deff <- dplyr::filter(Seasondata, HTM == DefTeam | VTM == DefTeam & TEAM_NAME != DefTeam)\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(c(Seasondata$LOC_X, deff$LOC_X))\n  ybnds <- range(c(Seasondata$LOC_Y, deff$LOC_Y))\n  #Make hexbin dataframes out of the teams\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n  ##Total NBA data\n  Totalhex <- makeHexData(Seasondata)\n  ##Defensive team data\n  Defhex <- makeHexData(deff)\n  ##Offensive team data\n  Offhex <- makeHexData(Off)\n  #Merge offensive and deffensive data with total data by Cell id\n  DeffbyCell <- merge(Totalhex, Defhex, by = \"cid\", all = T)\n  OffByCell <- merge(Totalhex, Offhex, by = \"cid\", all = T)\n  ##  when calculating the difference empty cells should count as 0\n  DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0\n  DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0\n  DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0\n\n  OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0\n  OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0\n  OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0\n  #  make a \"difference\" data.frame\n  DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),\n                         y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),\n                         PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,\n                         cid= DeffbyCell$cid,\n                         ST = DeffbyCell$ST.y)\n\n  DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),\n                        y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),\n                        PPS= OffByCell$PPS.y - OffByCell$PPS.x,\n                        ST = OffByCell$ST.x,\n                        cid = OffByCell$cid,\n                        ST = OffByCell$ST.y)\n  #make team comparisons\n  Comparison <- merge(DiffOff, DiffDeff, by = \"cid\", all = T)\n  Comparison <- Comparison[,-c(6:7)]\n  Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)\n\n\n  PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)\n\n\n  #Legend extractor\n  g_legend <- function(a.gplot){\n    tmp <- ggplot_gtable(ggplot_build(a.gplot))\n    leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")\n    legend <- tmp$grobs[[leg]]\n    return(legend)}\n\n  #Function to transform hexbins into polygons\n  hex_coord_df <- function(x, y, width, height, size = 1) {\n    # like hex_coord but returns a dataframe of vertices grouped by an id variable\n    dx <- log(size * width / 6)\n    dy <- log(size * height / 2 / sqrt(3))\n\n    hex_x <- rbind(x - 2 * dx, x - dx, x + dx, x + 2 * dx, x + dx, x - dx)\n    hex_y <- rbind(y, y + dy, y + dy, y, y - dy, y - dy)\n    id    <- rep(1:length(x), each=6)\n\n    data.frame(cbind(x=as.vector(hex_x), y=as.vector(hex_y), id))\n  }\n\n  #Filter by quantile and focus\n  if (focus == \"all\") {\n    DiffOff <- filter(DiffOff, ST > quantile(DiffOff$ST, probs = quant))\n    DiffDeff <- filter(DiffDeff, ST > quantile(DiffDeff$ST, probs = quant))\n    Comparison <- filter(Comparison, ST.x > quantile(Comparison$ST.x, probs = quant))\n  }\n  if (focus == \"plus\"){\n    DiffOff <- filter(DiffOff, ST > quantile(DiffOff$ST, probs = quant))\n    DiffDeff <- filter(DiffDeff, ST > quantile(DiffDeff$ST, probs = quant))\n    Comparison <- filter(Comparison, ST.x > quantile(Comparison$ST.x, probs = quant))\n    Comparison <- filter(Comparison, Diff >= 0)\n  }\n\n  if (focus == \"minus\") {\n    DiffOff <- filter(DiffOff, ST > quantile(DiffOff$ST, probs = quant))\n    DiffDeff <- filter(DiffDeff, ST > quantile(DiffDeff$ST, probs = quant))\n    Comparison <- filter(Comparison, ST.x > quantile(Comparison$ST.x, probs = quant))\n    Comparison <- filter(Comparison, Diff <= 0)\n  }\n  #Transform Hexbins into polygons\n\n  DFOFF <- hex_coord_df(DiffOff$x, DiffOff$y, (0.05*DiffOff$ST), (0.05*DiffOff$ST), size =1)\n  DFOFF$PPS <- rep(DiffOff$PPS, each = 6)\n\n  DFDEF <- hex_coord_df(DiffDeff$x, DiffDeff$y, DiffDeff$ST, DiffDeff$ST, size =1)\n  DFDEF$PPS <- rep(DiffDeff$PPS, each = 6)\n\n  DFDIF <- hex_coord_df(Comparison$x.x, Comparison$y.x, (0.05*Comparison$ST.x),(0.05*Comparison$ST.x), size =1)\n  DFDIF$Dif <- rep(Comparison$Diff, each = 6)\n\n  #Create Legend\n  OFFLEG <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low =\"blue\", high = \"red\", limits=c(-1.4, 1.4)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ ylim(c(-40, 270)) + xlim(-250, 250)+ theme(legend.position=\"bottom\") +  ggtitle(paste(OffTeam, \"Offensive\\n Shot Chart\", sep = \" \"))\n  leg<-g_legend(OFFLEG)\n\n  OFF <- ggplot(DFOFF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS)) + scale_fill_gradient2(low =\"blue\", high = \"red\", limits=c(-1.4, 1.4)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270))+ theme(legend.position=\"none\") + xlim(c(-250, 250)) +  ggtitle(paste(OffTeam, \"Offensive\\n Shot Chart\", sep = \" \"))\n  DEF <- ggplot(DFDEF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = PPS))+ scale_fill_gradient2(low =\"blue\", high = \"red\", limits=c(-1.4, 1.4)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) + ylim(c(-40, 270))+ xlim(c(-250, 250))+ theme(legend.position=\"none\") + ggtitle(paste(DefTeam, \"defensive\\n Shot Chart\", sep = \" \"))\n\n  COMP <- ggplot(DFDIF, aes(x=x, y = y))+ annotation_custom(court, -250, 250, -52, 418) + geom_polygon(aes(group = id, fill = Dif)) + scale_fill_gradient2(low =\"blue\", high = \"red\", limits=c(-1.4, 1.4)) +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\")) +  ylim(c(-40, 270))+ xlim(c(-250, 250))+ theme(legend.position=\"none\") + ggtitle(\"Comparison\\n Shot Chart\")\n  charts <- arrangeGrob(DEF,OFF, COMP, ncol = 3)\n  return(charts)\n}\n\n\nCom1 <- ShotComparisonGraph2(OffTeam = HomeTeam, DefTeam = VisitorTeam, Seasondata = Seasondata , nbins = nbins, quant = quant, focus = focus)\nCom2 <- ShotComparisonGraph2(OffTeam = VisitorTeam, DefTeam = HomeTeam, Seasondata = Seasondata , nbins = nbins, quant = quant, focus = focus)\nreturn(list(GRAPH = grid.arrange(Com1, Com2)))\n}\n",
    "created" : 1494234681793.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2552342226",
    "id" : "5007B0C3",
    "lastKnownWriteTime" : 1494246977,
    "last_content_update" : 1494246977422,
    "path" : "~/Documents/SpatialBall/R/Comparisons.R",
    "project_path" : "R/Comparisons.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}